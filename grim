#!/usr/bin/env perl
use strict;
use warnings;

# 
#   GRep to vIM - opens grep results in vim, passes commandline opts directly to grep commandline
#
#   SYNOPSIS 
#
#       grim -nrP '^\s*sub\s*encode' ./*
#
#



my $FOLD_CTX = 10; # lines above and below the focus line

my $read_only = 0;
my $grep_cmd = 'grep '.join(' ', map { $_ eq '--read-only' ? eval { $read_only = 1; return () } : esa($_) } @ARGV);
my $lines_by_file = {};
for (`$grep_cmd`) {
    my ($file, $line) = split /:/;
    next unless $file && $line;
    $lines_by_file->{$file} ||= [];
    push @{ $lines_by_file->{$file} }, $line;
}
exit unless keys %$lines_by_file;

my $vim_cmd_one_file = '%s %s
set foldmethod=manual
%s
1
';

my $vim_script = '';
my $first = 1;
for my $file (sort keys %$lines_by_file) {
    my $open_cmd = $first ? $read_only ? 'view' : 'edit' : 'tabe'.($read_only ? "\nview" : '');
    $first = 0;
    $vim_script .= sprintf(
        $vim_cmd_one_file, 
        $open_cmd,
        $file,
        vim_cmd_fold_all_around($lines_by_file->{$file})
    );
}
 
 # FIXME hardcoded alternative .vimrc
exec('vim -u '.$ENV{HOME}.'/git/my_vim/.vimrc_ro -c '.esa($vim_script));

sub vim_cmd_fold_all_around {
    my ($focus_lines) = @_;
    my $folds = '';
    my $fold_start = 1;
    for my $line (sort {$a <=> $b} @$focus_lines) {
        if ($line > $FOLD_CTX && ($line - $FOLD_CTX) > $fold_start) {
            $folds .= $fold_start.','.($line - $FOLD_CTX)." fold\n";
        }
        $fold_start = $line + $FOLD_CTX;
    }
    $folds .= 'silent! '.$fold_start.',$ fold';
    return $folds;
}

sub esa {
    $_[0] =~ s#'#'\\''#g;
    return "'" . $_[0] . "'";
}
